package com.logitopia.jmortar.core.sort;

import org.junit.Test;

/**
 * Comparative performance testing for all of the sorting algorithms.
 */
public class SortPerformanceUnitTest {

    private static final int[] TEST_PRIMATIVE_DATA = new int[]{359, 704, 855, 88, 264, 135, 34, 902, 840, 126, 193, 907,
            255, 500, 536, 100, 388, 70, 487, 775, 802, 556, 245, 894, 228, 226, 804, 810, 829, 61, 497, 788, 930, 23,
            581, 498, 73, 687, 208,
            838, 90, 241, 69, 800, 285, 103, 371, 678, 493, 10, 803, 62, 618, 211, 429, 636, 965, 604, 531, 690,
            394, 434, 790, 580, 974, 727, 993, 608, 578, 468, 485, 446, 563, 117, 210, 7, 702, 170, 270, 335, 238,
            459, 318, 289, 593, 519, 613, 764, 748, 922, 99, 460, 472, 351, 310, 348, 866, 644, 731, 202, 527, 342,
            625, 968, 616, 792, 809, 901, 433, 880, 121, 494, 917, 150, 747, 550, 424, 881, 726, 273, 147, 185, 32,
            275, 865, 47, 296, 458, 554, 397, 873, 489, 991, 496, 756, 892, 52, 617, 960, 679, 664, 797, 512, 439,
            949, 738, 224, 843, 198, 377, 13, 903, 910, 37, 120, 127, 387, 911, 867, 72, 54, 799, 218, 560, 93,
            824, 102, 430, 50, 141, 934, 716, 586, 109, 380, 213, 774, 169, 918, 491, 753, 98, 662, 466, 297, 623,
            405, 391, 582, 827, 345, 935, 174, 81, 457, 269, 944, 888, 36, 5, 281, 749, 517, 444, 622, 818, 878,
            533, 242, 349, 362, 520, 447, 24, 19, 750, 916, 972, 104, 538, 599, 8, 184, 812, 425, 583, 87, 130,
            383, 739, 619, 904, 441, 546, 67, 450, 740, 440, 564, 65, 779, 979, 794, 639, 495, 931, 656, 997, 492,
            766, 378, 311, 920, 274, 883, 752, 948, 232, 869, 295, 699, 933, 301, 926, 989, 861, 912, 981, 782,
            426, 395, 807, 177, 506, 294, 44, 576, 156, 16, 559, 545, 221, 21, 673, 122, 628, 757, 262, 677, 307,
            350, 746, 780, 915, 476, 194, 25, 31, 696, 340, 14, 276, 445, 277, 293, 196, 745, 598, 525, 762, 421,
            899, 951, 771, 526, 692, 710, 143, 453, 291, 558, 521, 508, 279, 82, 868, 791, 76, 176, 839, 265, 828,
            635, 336, 776, 328, 357, 822, 381, 986, 849, 167, 785, 744, 864, 266, 602, 957, 990, 470, 606, 875,
            112, 334, 514, 339, 390, 161, 20, 197, 192, 697, 821, 842, 142, 53, 548, 588, 529, 409, 246, 728, 222,
            165, 115, 928, 675, 419, 393, 15, 413, 39, 511, 401, 40, 250, 544, 320, 942, 145, 659, 309, 2, 919,
            891, 772, 134, 601, 46, 691, 823, 199, 552, 462, 895, 577, 575, 125, 971, 420, 35, 231, 144, 416, 641,
            645, 573, 961, 996, 534, 759, 392, 300, 886, 317, 75, 396, 499, 542, 540, 999, 261, 663, 610, 528, 386,
            180, 603, 314, 850, 985, 638, 298, 787, 354, 398, 365, 955, 443, 373, 906, 18, 700, 532, 621, 158, 835,
            163, 670, 483, 372, 998, 256, 257, 666, 384, 572, 346, 91, 681, 355, 168, 596, 723, 237, 410, 969, 650,
            962, 55, 847, 267, 484, 288, 585, 129, 851, 353, 571, 448, 191, 984, 648, 806, 763, 884, 337, 718, 423,
            717, 927, 235, 106, 137, 123, 477, 893, 773, 486, 428, 173, 735, 1, 251, 879, 959, 783, 570, 327, 913,
            730, 813, 808, 765, 89, 734, 195, 223, 612, 976, 693, 695, 375, 857, 798, 417, 162, 249, 947, 600, 953,
            253, 283, 940, 680, 164, 131, 860, 260, 389, 3, 778, 456, 408, 475, 982, 950, 761, 530, 58, 139, 111,
            742, 626, 874, 205, 975, 568, 157, 547, 555, 239, 831, 338, 631, 464, 932, 505, 605, 964, 368, 633,
            516, 175, 45, 848, 836, 858, 57, 234, 900, 725, 449, 569, 385, 361, 709, 51, 49, 539, 733, 74, 657,
            252, 181, 38, 793, 653, 503, 478, 304, 271, 574, 240, 686, 258, 995, 834, 402, 77, 854, 259, 59, 952,
            28, 404, 590, 6, 707, 594, 216, 406, 331, 905, 781, 9, 411, 114, 376, 665, 438, 703, 325, 689, 233,
            956, 815, 128, 557, 862, 229, 412, 816, 138, 471, 160, 714, 132, 796, 148, 507, 68, 414, 561, 553,
            451, 732, 607, 980, 672, 282, 698, 186, 154, 60, 326, 597, 501, 107, 708, 247, 671, 591, 119, 172,
            872, 212, 983, 110, 207, 149, 96, 86, 332, 719, 292, 819, 382, 22, 652, 977, 488, 407, 214, 595, 422,
            562, 923, 268, 400, 146, 770, 741, 116, 524, 954, 634, 83, 632, 721, 584, 760, 329, 436, 183, 830,
            688, 967, 248, 360, 929, 909, 105, 896, 43, 914, 243, 490, 220, 356, 230, 166, 755, 153, 403, 646,
            853, 136, 64, 319, 876, 682, 431, 352, 4, 369, 852, 870, 178, 1000, 973, 435, 987, 312, 683, 825, 817
            , 370, 341, 27, 924, 882, 11, 543, 454, 179, 79, 658, 537, 42, 589, 736, 669, 236, 885, 936, 627, 642
            , 712, 513, 374, 661, 159, 844, 651, 347, 978, 30, 724, 611, 715, 324, 655, 482, 344, 729, 215, 640,
            367, 286, 427, 898, 629, 846, 152, 201, 287, 284, 113, 80, 133, 711, 966, 647, 820, 108, 579, 313,
            306, 84, 308, 321, 399, 566, 992, 630, 363, 97, 263, 244, 85, 343, 943, 272, 890, 481, 17, 101, 567,
            95, 322, 811, 418, 937, 970, 358, 637, 504, 92, 938, 316, 737, 667, 254, 706, 41, 795, 442, 209, 219,
            609, 303, 676, 299, 366, 751, 461, 188, 713, 833, 63, 592, 432, 151, 832, 29, 897, 939, 315, 124, 877
            , 921, 668, 465, 685, 889, 48, 649, 323, 958, 415, 887, 379, 660, 515, 33, 474, 290, 754, 814, 278,
            364, 789, 784, 467, 190, 769, 856, 455, 863, 182, 305, 118, 452, 333, 551, 140, 549, 535, 94, 510,
            859, 71, 78, 302, 203, 509, 826, 994, 722, 206, 963, 768, 189, 187, 845, 217, 437, 801, 480, 155, 280
            , 479, 988, 463, 841, 871, 743, 518, 946, 620, 654, 674, 565, 469, 12, 615, 684, 643, 908, 945, 587,
            624, 720, 777, 767, 26, 694, 925, 66, 614, 523, 473, 225, 805, 522, 786, 227, 758, 330, 837, 701, 204
            , 705, 171, 200, 502, 941, 541, 56};

    @Test(timeout = 20)
    public void testBubbleSortPerformance() {
        long start = System.currentTimeMillis();
        BubbleSort sort = new BubbleSort();
        sort.sort(TEST_PRIMATIVE_DATA);
        long end = System.currentTimeMillis();
        System.out.println("Sort took " + (end - start) + " MilliSeconds");
    }
}
